(window.webpackJsonp=window.webpackJsonp||[]).push([[1],[,function(n,t,r){"use strict";r.r(t);const e=new(r(2).a);document.getElementById("calcButton").addEventListener("click",n=>{c()});const c=()=>{e.calc()}},function(n,t,r){"use strict";(function(n){r.d(t,"a",function(){return v}),r.d(t,"k",function(){return E}),r.d(t,"y",function(){return A}),r.d(t,"n",function(){return T}),r.d(t,"r",function(){return j}),r.d(t,"o",function(){return k}),r.d(t,"w",function(){return x}),r.d(t,"u",function(){return $}),r.d(t,"s",function(){return I}),r.d(t,"x",function(){return S}),r.d(t,"v",function(){return O}),r.d(t,"t",function(){return F}),r.d(t,"q",function(){return _}),r.d(t,"p",function(){return B}),r.d(t,"m",function(){return H}),r.d(t,"e",function(){return J}),r.d(t,"b",function(){return L}),r.d(t,"c",function(){return C}),r.d(t,"f",function(){return M}),r.d(t,"g",function(){return q}),r.d(t,"d",function(){return D}),r.d(t,"i",function(){return N}),r.d(t,"j",function(){return U}),r.d(t,"h",function(){return W}),r.d(t,"l",function(){return z});var e=r(4);const c=new Array(32);function u(n){return c[n]}c.fill(void 0),c.push(void 0,null,!0,!1);let o=c.length;function i(n){const t=u(n);return function(n){n<36||(c[n]=o,o=n)}(n),t}let f=new TextDecoder("utf-8"),l=null;function s(){return null!==l&&l.buffer===e.g.buffer||(l=new Uint8Array(e.g.buffer)),l}function a(n,t){return f.decode(s().subarray(n,n+t))}function d(n){return null==n}function h(n){o===c.length&&c.push(c.length+1);const t=o;return o=c[t],c[t]=n,t}let g,w=0,b=new TextEncoder("utf-8");g="function"==typeof b.encodeInto?function(n){let t=n.length,r=e.c(t),c=0;{const t=s();for(;c<n.length;c++){const e=n.charCodeAt(c);if(e>127)break;t[r+c]=e}}if(c!==n.length){n=n.slice(c),r=e.d(r,t,t=c+3*n.length);const u=s().subarray(r+c,r+t);c+=b.encodeInto(n,u).written}return w=c,r}:function(n){let t=n.length,r=e.c(t),c=0;{const t=s();for(;c<n.length;c++){const e=n.charCodeAt(c);if(e>127)break;t[r+c]=e}}if(c!==n.length){const u=b.encode(n.slice(c));r=e.d(r,t,t=c+u.length),s().set(u,r+c),c+=u.length}return w=c,r};let y=null;function p(){return null!==y&&y.buffer===e.g.buffer||(y=new Int32Array(e.g.buffer)),y}function m(n){e.b(h(n))}class v{static __wrap(n){const t=Object.create(v.prototype);return t.ptr=n,t}free(){const n=this.ptr;this.ptr=0,e.a(n)}constructor(){const n=e.f();return v.__wrap(n)}calc(){e.e(this.ptr)}}const E=function(n){i(n)},A=function(n){return u(n)instanceof Window},T=function(n,t,r){const e=u(n).getElementById(a(t,r));return d(e)?0:h(e)},j=function(n,t){u(n).scrollTop=t},k=function(n){return u(n).scrollHeight},x=function(n){return u(n)instanceof HTMLInputElement},$=function(n,t){const r=u(t).value,e=g(r),c=w;p()[n/4+0]=e,p()[n/4+1]=c},I=function(n,t,r){u(n).value=a(t,r)},S=function(n){return u(n)instanceof HTMLTextAreaElement},O=function(n,t){const r=u(t).value,e=g(r),c=w;p()[n/4+0]=e,p()[n/4+1]=c},F=function(n,t,r){u(n).value=a(t,r)},_=function(n,t){try{const r=u(t).selectionStart,e=!d(r),c=d(r)?0:r;p()[n/4+0]=e,p()[n/4+1]=c}catch(n){m(n)}},B=function(n,t){try{const r=u(t).selectionEnd,e=!d(r),c=d(r)?0:r;p()[n/4+0]=e,p()[n/4+1]=c}catch(n){m(n)}},H=function(n){const t=u(n).document;return d(t)?0:h(t)},J=function(n,t){return h(new Function(a(n,t)))},L=function(n,t){try{return h(u(n).call(u(t)))}catch(n){m(n)}},C=function(){try{return h(globalThis.globalThis)}catch(n){m(n)}},M=function(){try{return h(self.self)}catch(n){m(n)}},q=function(){try{return h(window.window)}catch(n){m(n)}},D=function(){try{return h(n.global)}catch(n){m(n)}},N=function(n){return void 0===u(n)},U=function(n){return h(u(n))},W=function(n,t){const r=function n(t){const r=typeof t;if("number"==r||"boolean"==r||null==t)return`${t}`;if("string"==r)return`"${t}"`;if("symbol"==r){const n=t.description;return null==n?"Symbol":`Symbol(${n})`}if("function"==r){const n=t.name;return"string"==typeof n&&n.length>0?`Function(${n})`:"Function"}if(Array.isArray(t)){const r=t.length;let e="[";r>0&&(e+=n(t[0]));for(let c=1;c<r;c++)e+=", "+n(t[c]);return e+="]"}const e=/\[object ([^\]]+)\]/.exec(toString.call(t));let c;if(!(e.length>1))return toString.call(t);if("Object"==(c=e[1]))try{return"Object("+JSON.stringify(t)+")"}catch(n){return"Object"}return t instanceof Error?`${t.name}: ${t.message}\n${t.stack}`:c}(u(t)),e=g(r),c=w;p()[n/4+0]=e,p()[n/4+1]=c},z=function(n,t){throw new Error(a(n,t))}}).call(this,r(3))},function(n,t){var r;r=function(){return this}();try{r=r||new Function("return this")()}catch(n){"object"==typeof window&&(r=window)}n.exports=r},function(n,t,r){"use strict";var e=r.w[n.i];n.exports=e;r(2);e.h()}]]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,