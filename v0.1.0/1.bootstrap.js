(window.webpackJsonp=window.webpackJsonp||[]).push([[1],[,function(t,n,e){"use strict";e.r(n);const c=e(2).a.new();document.getElementById("calcButton").addEventListener("click",t=>{r()});const r=()=>{let t=document.getElementById("input").value;var n=document.getElementById("inputHistory");n.selectionStart==n.selectionEnd&&(n.scrollTop=n.scrollHeight),n.value+=t+"\n";let e=c.calc(t);console.log("calculation: "+JSON.stringify(e,null,2)),"success"===e.state&&(document.getElementById("output").value=e.value)}},function(t,n,e){"use strict";e.d(n,"b",function(){return p}),e.d(n,"c",function(){return g}),e.d(n,"a",function(){return w});var c=e(3);let r,o=0,u=new TextEncoder("utf-8"),l=null;function i(){return null!==l&&l.buffer===c.f.buffer||(l=new Uint8Array(c.f.buffer)),l}r="function"==typeof u.encodeInto?function(t){let n=t.length,e=c.b(n),r=0;{const n=i();for(;r<t.length;r++){const c=t.charCodeAt(r);if(c>127)break;n[e+r]=c}}if(r!==t.length){t=t.slice(r),e=c.c(e,n,n=r+3*t.length);const o=i().subarray(e+r,e+n);r+=u.encodeInto(t,o).written}return o=r,e}:function(t){let n=t.length,e=c.b(n),r=0;{const n=i();for(;r<t.length;r++){const c=t.charCodeAt(r);if(c>127)break;n[e+r]=c}}if(r!==t.length){const o=u.encode(t.slice(r));e=c.c(e,n,n=r+o.length),i().set(o,e+r),r+=o.length}return o=r,e};const s=new Array(32);s.fill(void 0),s.push(void 0,null,!0,!1);let f=s.length;function a(t){const n=function(t){return s[t]}(t);return function(t){t<36||(s[t]=f,f=t)}(t),n}let d=new TextDecoder("utf-8");function h(t,n){return d.decode(i().subarray(t,t+n))}function p(t,n){return function(t){f===s.length&&s.push(s.length+1);const n=f;return f=s[n],s[n]=t,n}(JSON.parse(h(t,n)))}function g(t,n){throw new Error(h(t,n))}class w{static __wrap(t){const n=Object.create(w.prototype);return n.ptr=t,n}free(){const t=this.ptr;this.ptr=0,function(t){c.a(t)}(t)}static new(){return w.__wrap(c.e())}calc(t){const n=r(t),e=o;return a(c.d(this.ptr,n,e))}}},function(t,n,e){"use strict";var c=e.w[t.i];t.exports=c;e(2);c.g()}]]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,